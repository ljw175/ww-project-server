
  .backspaceButton {
    background-color: #f4f4f4; /* 버튼의 배경색 */
    background-image: 
    linear-gradient(to right, #707070 0.5px, transparent 0.5px);
    background-position: 58.5px 0px;
    margin: 0px;
    width: 59px;
    height: 43px;
    border: none;
  }

  .backspaceButtonIcon {
    width: 22px;
    height: 21px;
  }

  .backspaceButton:hover {
    cursor: pointer; /* 커서를 손가락 모양으로 변경 */
  }
  
  .modeButton {
    background-color: #f4f4f4; /* 버튼의 배경색 */
    color: black;              /* 버튼의 텍스트 색상 */
    font-size: 15px;
    width: 68px;
    height: 43px;
    border: none;            /* 버튼의 테두리 제거 */
  }

  .modeButton:hover {
    cursor: pointer; /* 커서를 손가락 모양으로 변경 */
  }

  .optionButton {
    background-color: #f4f4f4; /* 버튼의 배경색 */
    color: black; 
    font-size: 14px;
    border: none;              /* 버튼의 테두리 제거 */
    width: auto;
    height: 44px;
    padding: 12px;
  }

  .optionButton:hover {
    cursor: pointer; /* 커서를 손가락 모양으로 변경 */
  }

  .selectButtonIcon {
    width: 10px;
    height: 10px;
  }

  .placeButtonIcon {
    width: 11px;
    height: 11px;
  }

  .characterButtonIcon {
    width: 8px;
    height: 13px;
  }

  .eventButtonIcon {
    width: 3px;
    height: 14px;
  }

  .selectCursor {
    cursor: url('./images/SelectCursor.png'), auto;
  }
  
  .placeCursor {
    cursor: url('./images/SelectCursor.png'), auto;
  }
  
  .characterCursor {
    cursor: url('./images/SelectCursor.png'), auto;
  }
  
  .eventCursor {
    cursor: url('./images/SelectCursor.png'), auto;
  }


  .modeButtonClicked {
    background-image: linear-gradient(to bottom, #0075ff 3px, transparent 3px);
    background-position: 0 40.5px;
    background-repeat: no-repeat;
    font-weight: bolder;
  }

  .optionButtonClicked {
    background-color: #d9d9d9;
  }

  .tile-row {
    display: flex; /* Use flex to layout tiles in a row */
    width: 100%; /* Full width to accommodate all tiles */
    justify-content: center; /* Center tiles within the row */
  }  

  .tileMapContainer {
    display: flex; /* Enable flex layout */
    flex-wrap: wrap; /* Allow tiles to wrap to next line */
    justify-content: center; /* Center tiles horizontally */
    max-width: 100vw; /* Max width to prevent overflow */
    overflow-x: hidden; /* Hide horizontal scrollbar */
  }

  .tile {
    background-color: #d9d9d9;
    display: flex;
    width: 40px; /* or any size */
    height: 40px; /* or any size */
    position: relative;
    margin: 0.6675px;
    vertical-align: top;
    align-items: center; /* Center content vertically */
    justify-content: center; /* Center content horizontally */
  }
  
  .selectedTile:hover {
    cursor: pointer; /* Changes cursor to pointer (finger shape) when hovering over the selected tile */
  }
  
  .selectedTile::after {
    content: '';
    background-image: url('./images/TileSelected.png'); /* path to your image */
    background-size: cover;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 2;
    pointer-events: none; /* ensures that the overlay does not interfere with tile interactions */
  }
  

  .tileMap{
    background-color: rgb(128, 128, 128);
    display: flex; /* Ensure flex layout */
    flex-wrap: nowrap; /* Prevent wrapping of tiles */
  }

  .placeTileImage {
    position: absolute;
    max-height: 100%;
    max-width: 101%;
  }

  .characterTileImage {
    position: absolute;
    width: 21px;
    height: 32px;
  }

  .eventTileImage {
    margin-left: 25px;
    padding-bottom: 20px;
    width: 3px;
    height: 14px;
  }
  
  .overlay {
    /* If you want to stack images on top of each other within the tile */
    z-index: 1; /* Increase z-index for each layer, if necessary */
  }

  .detailPopup {
    position: absolute;
    background-color: white;
    border: 1px solid #ccc;
    padding: 10px;
    z-index: 1000;
    width: 200px; /* Adjust width as needed */
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* Add shadow for visual distinction */
  }
  